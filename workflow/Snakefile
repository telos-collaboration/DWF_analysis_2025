configfile: "config/config.yaml"


from glob import glob
import pandas as pd


include: "rules/wilson.smk"


metadata = pd.read_csv(config["metadata"])

CSVs = expand(
    "data_assets/{name}.csv", name=["WF_measurements", "plateau_fits_results"]
)
plots = expand(
    f"assets/plots/{{name}}{config['plot_filetype']}",
    name=[
        "chiral_aoverw0_vs_mPS",
        "fit_w0_mPS_mV",
        "Ls_scan_beta6.8",
        "Ls_scan_beta7.0",
        "mres_scan_largeLs",
        "mres_scan_mF0.02",
        "mres_scan_mF0.06",
        "effmass_ZA_B1M1",
        "effmass_mres_B4M8",
    ]
    + expand(
        "{prefix}_{beta}",
        prefix=[
            "GMOR_w0m0_vs_w0m_PS",
            "GMOR_w0m0_vs_w0fpi",
            "GMOR_w0m0_vs_w0_m_PS_fpi",
            "m0_vs_m_V_m_PS",
            "NLO_mPS_w0_beta",
        ],
        beta=set(metadata["beta"]),
    ),
)


rule all:
    input:
        "assets/info.json",
        "data_assets/info.json",
    default_target: True


rule assets_stamp:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/provenance.py",
        plots=plots,
    output:
        "assets/info.json",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.plots} --output_file {output}"


rule data_assets_stamp:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/provenance.py",
        CSVs=CSVs,
    output:
        "data_assets/info.json",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.plots} --output_file {output}"


def WF_logs(wildcards):
    return glob(f"{config['wf_dir']}/{wildcards.subdir}/wflow.*.out")


rule WF_and_Q:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/WF_and_Q.py",
        data=WF_logs,
    output:
        summary="intermediary_data/mdwf/{subdir}/WF_summary.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --tag {wildcards.subdir} --output_file {output.summary} --W0 {config[W0]}"


def WF_csvs(wildcards):
    return [
        "intermediary_data/mdwf/{subdir}/WF_summary.csv".format(subdir=datum.name)
        for datum in metadata.itertuples()
        if datum.gflow_step > 0
    ]


rule combine_WF_Q:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=WF_csvs,
    output:
        csv="data_assets/WF_measurements.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --output_file {output.csv}"


rule spectrum_and_decay:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        L=lookup(query="name == '{wildcards.subdir}'", within=metadata, cols="Nx"),
    input:
        script="src/spectrum_and_decay.py",
        data=glob_wildcards(f"{config['correlator_dir']}/{{subdir}}/*.xml"),
        plot_styles=config["plot_styles"],
    output:
        csv="intermediary_data/mdwf/{subdir}/spectrum.csv",
        ZA_plot=f"intermediary_data/mdwf/{{subdir}}/ZA{config['plot_filetype']}",
        mres_plot=f"intermediary_data/mdwf/{{subdir}}/mres{config['plot_filetype']}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --correlator_dir {config[correlator_dir]}/{wildcards.subdir} --csv_file {output.csv} --spatial_extent {params.L} --plot_styles {input.plot_styles} --output_file_mres {output.mres_plot} --output_file_ZA {output.ZA_plot}"


rule collate_eff_masses:
    input:
        plot="intermediary_data/mdwf/{ensemble}/{plot_name}.{filetype}",
    output:
        plot="assets/plots/effmass_{plot_name}_{ensemble}.{filetype}",
    shell:
        "cp {input.plot} {output.plot}"


def spectrum_csvs(wildcards):
    return [
        "intermediary_data/mdwf/{subdir}/spectrum.csv".format(subdir=datum.name)
        for datum in metadata.itertuples()
        if datum.have_spectrum
    ]


rule combine_spectrum:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=spectrum_csvs,
    output:
        csv="data_assets/plateau_fits_results.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --output_file {output.csv}"


def fig_label(wildcards):
    metadatum = metadata.query(f"name == {wildcards.subdir}")
    assert len(metadatum) == 1
    return f"$\\beta={metadatum['beta'][0]}, am={metadatum['mF'][0]}$"


rule plot_wflow_E:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        label=fig_label,
    input:
        script="src/plot_WF_E.py",
        data=WF_logs,
        plot_styles=config["plot_styles"],
    output:
        plot="intermediary_data/mdwf/{subdir}/E_flow.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --ensemble_label '{params.label}'"


rule plot_wflow_W:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        label=fig_label,
    input:
        script="src/plot_WF_W.py",
        data=WF_logs,
        plot_styles=config["plot_styles"],
    output:
        plot="intermediary_data/mdwf/{subdir}/W_flow.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --ensemble_label '{params.label}'"


rule plot_topological_charge:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        label=fig_label,
    input:
        script="src/plot_topcharge.py",
        data=WF_logs,
        plot_styles=config["plot_styles"],
    output:
        plot="intermediary_data/mdwf/{subdir}/Q_history.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --W0 {config[W0]} --ensemble_label '{params.label}'"


rule tabulate_spectrum:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/tabulate_spectrum.py",
        spectrum_csv=rules.spectrum_and_decay.output.csv,
    output:
        tex="assets/tables/spectrum.tex",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.spectrum_csv} --output_file {output.tex}"


def hmc_logs(wildcards):
    return glob(f"{config['hmc_dir']}/{wildcards.subdir}/hmc_*.out")


rule hmc_timing:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/hmc_timing.py",
        logs=hmc_logs,
    output:
        csv="intermediary_data/mdwf/{subdir}/timing.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.logs} --output_file {output.csv} --tag {wildcards.subdir}"


def hmc_csvs(wildcards):
    return [
        "intermediary_data/mdwf/{subdir}/timing.csv".format(subdir=datum.name)
        for datum in metadata.itertuples()
        if datum.have_hmc
    ]


rule combine_hmc:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=hmc_csvs,
    output:
        csv="data_assets/hmc_timing_results.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --output_file {output.csv}"


rule combined_mobius_csv:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        hmc=rules.combine_hmc.output.csv,
        wflow=rules.combine_WF_Q.output.csv,
        spectrum=rules.combine_spectrum.output.csv,
    output:
        csv="data_assets/mobius_results.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.hmc} {input.wflow} {input.spectrum} --output_file {output.csv}"


# TODO Test and fix
rule timing_plot:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/time_elapsed_autocorr_plaquette.py",
        data=rules.combined_mobius_csv.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/time_plot_plaquette.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --data {input.data} --plot_styles {input.plot_styles} --output_file {output.plot}"


def Ls_scan_data(wildcards):
    return [
        "intermediary_data/mdwf/{subdir}/{filename}.csv".format(
            subdir=datum.name,
            filename=filename,
        )
        for datum in metadata.itertuples()
        for filename in ["spectrum", "timing"]
        if datum.use_in_Ls_scan and datum.beta == float(wildcards.beta)
    ]


rule combined_Ls_scan:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=Ls_scan_data,
    output:
        csv="intermediary_data/Ls_scan_{beta}.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --output_file {output.csv}"


# TODO Test and fix
rule Ls_scan_timing:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/plot_mres_vs_diracapps.py",
        data=rules.combined_Ls_scan.output.csv,
    output:
        plot="assets/plots/Ls_scan_beta{beta}.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --data {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --title '$\\beta = {wildcards.beta}$"


def mres_scan_data(wildcards):
    return [
        "intermediary_data/mdwf/{subdir}/spectrum.csv".format(subdir=datum.name)
        for datum in metadata.itertuples()
        if datum.use_in_parameter_tuning
        and (
            datum.mF == float(wildcards.mF)
            # Add mass scan plot
            or (
                wildcards.mF == "0.06"
                and datum.Ls == 8
                and datum.beta == 6.8
                and datum.a5 == 1.0
                and datum.alpha == 2.0
                and datum.M5 == 1.8
            )
        )
    ]


rule collate_mres_scan:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=mres_scan_data,
        metadata=config["metadata"],
    output:
        csv="intermediary_data/mres_scan_mF{mF}.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --metadata_file {input.metadata} --output_file {output.csv}"


rule mres_scan:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/plot_mres_scans.py",
        data=rules.collate_mres_scan.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/mres_scan_mf{mF}.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --data {input.data} --plot_styles {input.plot_styles} --output_file {output.plot}"


def mres_scan_largeLs_data(wildcards):
    return [
        "intermediary_data/mdwf/{subdir}/spectrum.csv".format(subdir=datum.name)
        for datum in metadata.itertuples()
        if datum.use_in_Ls_scan
    ]


rule collate_mres_scan_largeLs:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=mres_scan_largeLs_data,
        metadata=config["metadata"],
    output:
        csv="intermediary_data/mres_scan_largeLs.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --metadata_file {input.metadata} --output_file {output.csv}"


rule mres_scan_largeLs:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/plot_mres_scan_different_betas.py",
        data=rules.collate_mres_scan_largeLs.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/mres_scan_largeLs.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --data {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --height 3"


rule GMOR_plots:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/GMOR_and_mV_mPS_ratio.py",
        data=rules.combined_mobius_csv.output.csv,
        plot_styles=config["plot_styles"],
    output:
        GMOR_mPS="assets/plots/GMOR_w0m0_vs_w0m_PS_{beta}.{filetype}",
        GMOR_fpi="assets/plots/GMOR_w0m0_vs_w0fpi_{beta}.{filetype}",
        GMOR_mPSfpi="assets/plots/GMOR_w0m0_vs_w0_m_PS_fpi_{beta}.{filetype}",
        bare="assets/plots/m0_vs_m_V_m_PS_{beta}.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --data {input.data} --beta {wildcards.beta} --output_file_GMOR_mPS {output.GMOR_mPS} --output_file_GMOR_fpi {output.GMOR_fpi} --output_file_GMOR_mPSfpi {output.GMOR_mPSfpi} --output_file_bare {output.bare}"


rule NLO_w0_single_beta:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/NLO_w0_single.py",
        data=rules.combined_mobius_csv.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/NLO_mPS_w0_beta_{beta}.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --data {input.data} --beta {wildcards.beta} --output_file {output.plot}"


rule NLO_w0_summary:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/NLO_w0.py",
        data=rules.combined_mobius_csv.output.csv,
        plot_styles=config["plot_styles"],
        wilson_csv=rules.combine_wilson_csvs.output.csv,
    output:
        plot="assets/plots/chiral_aoverw0_vs_mPS.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --data {input.data} --wilson_results {input.wilson_csv} --output_file {output.plot}"


rule chiPT:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/perform_chiPT.py",
        data=rules.combined_mobius_csv.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/fit_w0_mPS_mV.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --data {input.data} --output_file {output.plot}"
