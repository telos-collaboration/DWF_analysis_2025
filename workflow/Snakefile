configfile: "config/config.yaml"


from glob import glob
import pandas as pd


include: "rules/wilson.smk"


metadata = pd.read_csv(config["metadata"])

CSVs = expand(
    "data_assets/{name}.csv", name=["WF_measurements", "plateau_fits_results"]
)
plots = expand(
    f"assets/plots/{{name}}{config['plot_filetype']}",
    name=["chiral_aoverw0_vs_mPS", "fit_w0_mPS_mV"]
    + expand(
        "{prefix}_{beta_idx}",
        prefix=[
            "GMOR_w0m0_vs_w0m_PS",
            "GMOR_w0m0_vs_w0fpi",
            "GMOR_w0m0_vs_w0_m_PS_fpi",
            "m0_vs_m_V_m_PS",
            "NLO_mPS_w0_beta",
        ],
        beta_idx=config["beta_indices"],
    ),
)


rule all:
    input:
        "assets/info.json" "data_assets/info.json",
    default_target: True


rule assets_stamp:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/provenance.py",
        plots=plots,
    output:
        "assets/info.json",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.plots} --output_file {output}"


rule data_assets_stamp:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/provenance.py",
        CSVs=CSVs,
    output:
        "data_assets/info.json",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.plots} --output_file {output}"


def WF_logs(wildcards):
    return glob(
        f"{config['wf_dir']}/ens{wildcards.beta_idx}_m{wildcards.mass_idx}/wflow.*.out"
    )


rule WF_and_Q:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/WF_and_Q.py",
        data=WF_logs,
    output:
        summary="intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/WF_summary.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --tag {config[wf_dir]}/ens{wildcards.beta_idx}_m{wildcards.mass_idx} --output_file {output.summary} --W0 {config[W0]}"


def WF_csvs(wildcards):
    return [
        "intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/WF_summary.csv".format(
            beta_idx=datum.beta_index, mass_idx=datum.mass_index
        )
        for datum in metadata.itertuples()
        if datum.gflow_step > 0
    ]


rule combine_WF_Q:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=WF_csvs,
    output:
        csv="data_assets/WF_measurements.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --output_file {output.csv}"


rule spectrum_and_decay:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/spectrum_and_decay.py",
        data=glob_wildcards(
            f"{params['correlator_dir']}/ens{{beta_idx}}_m{{mass_idx}}/*.xml"
        ),
    output:
        csv="intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/spectrum.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --correlator_dir {config[correlator_dir]}/ens{wildcards.beta_idx}_m{wildcards.mass_idx} --csv_file {output.csv}"


def spectrum_csvs(wildcards):
    return [
        "intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/spectrum.csv".format(
            beta_idx=datum.beta_index, mass_idx=datum.mass_index
        )
        for datum in metadata.itertuples()
        if datum.have_spectrum
    ]


rule combine_spectrum:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/concatenate_csv.py",
        data=spectrum_csvs,
    output:
        csv="data_assets/plateau_fits_results.csv",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --output_file {output.csv}"


rule GMOR_plots:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/GMOR_and_mV_mPS_ratio.py",
        spectrum_csv=rules.spectrum_and_decay.output.csv,
        wf_csv=rules.combine_WF_Q.output.csv,
        plot_styles=config["plot_styles"],
    output:
        GMOR_mPS="assets/plots/GMOR_w0m0_vs_w0m_PS_{beta_idx}.{filetype}",
        GMOR_fpi="assets/plots/GMOR_w0m0_vs_w0fpi_{beta_idx}.{filetype}",
        GMOR_mPSfpi="assets/plots/GMOR_w0m0_vs_w0_m_PS_fpi_{beta_idx}.{filetype}",
        bare="assets/plots/m0_vs_m_V_m_PS_{beta_idx}.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --wf_results {input.wf_csv} --plateau_results {input.spectrum_csv} --beta_idx {wildcards.beta_idx} --correlator_dir_template {config[correlator_dir]}/ens{{N}}_m{{M}} --wf_dir_template {config[wf_dir]}/ens{{N}}_m{{M}} --output_file_GMOR_mPS {output.GMOR_mPS} --output_file_GMOR_fpi {output.GMOR_fpi} --output_file_GMOR_mPSfpi {output.GMOR_mPSfpi} --output_file_bare {output.bare}"


rule NLO_w0_single_beta:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/NLO_w0_single.py",
        spectrum_csv=rules.spectrum_and_decay.output.csv,
        wf_csv=rules.combine_WF_Q.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/NLO_mPS_w0_beta_{beta_idx}.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --wf_results {input.wf_csv} --plateau_results {input.spectrum_csv} --beta_idx {wildcards.beta_idx} --correlator_dir_template {config[correlator_dir]}/ens{{N}}_m{{M}} --wf_dir_template {config[wf_dir]}/ens{{N}}_m{{M}} --output_file {output.plot}"


rule NLO_w0_summary:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/NLO_w0.py",
        spectrum_csv=rules.combine_spectrum.output.csv,
        wf_csv=rules.combine_WF_Q.output.csv,
        plot_styles=config["plot_styles"],
        wilson_csv=rules.combine_wilson_csvs.output.csv,
    output:
        plot="assets/plots/chiral_aoverw0_vs_mPS.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --wf_results {input.wf_csv} --plateau_results {input.spectrum_csv} --correlator_dir_template {config[correlator_dir]}/ens{{N}}_m{{M}} --wf_dir_template {config[wf_dir]}/ens{{N}}_m{{M}} --wilson_results {input.wilson_csv} --output_file {output.plot}"


rule chiPT:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/perform_chiPT.py",
        spectrum_csv=rules.spectrum_and_decay.output.csv,
        wf_csv=rules.combine_WF_Q.output.csv,
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/fit_w0_mPS_mV.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} --plot_styles {input.plot_styles} --wf_results {input.wf_csv} --plateau_results {input.spectrum_csv} --output_file {output.plot}"


def fig_label(wildcards):
    metadatum = metadata.query(
        f"beta_index == {wildcards.beta_idx} & mass_index == {wildcards.mass_idx}",
    )
    assert len(metadatum) == 1
    return f"$\\beta={metadatum['beta'][0]}, am={metadatum['mF'][0]}$"


rule plot_wflow_E:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        label=fig_label,
    input:
        script="src/plot_WF_E.py",
        data=WF_logs,
        plot_styles=config["plot_styles"],
    output:
        plot="intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/E_flow.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --ensemble_label '{params.label}'"


rule plot_wflow_W:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        label=fig_label,
    input:
        script="src/plot_WF_W.py",
        data=WF_logs,
        plot_styles=config["plot_styles"],
    output:
        plot="intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/W_flow.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --ensemble_label '{params.label}'"


rule plot_topological_charge:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
        label=fig_label,
    input:
        script="src/plot_topcharge.py",
        data=WF_logs,
        plot_styles=config["plot_styles"],
    output:
        plot="intermediary_data/mdwf/ens{beta_idx}_m{mass_idx}/Q_history.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --W0 {config[W0]} --ensemble_label '{params.label}'"


rule tabulate_spectrum:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/tabulate_spectrum.py",
        spectrum_csv=rules.spectrum_and_decay.output.csv,
    output:
        tex="assets/tables/spectrum.tex",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.spectrum_csv} --output_file {output.tex}"


# TODO Test and fix
rule timing_plot:
    params:
        module=lambda wildcards, input: input.script.replace("/", ".")[:-3],
    input:
        script="src/time_elapsed_autocorr_plaquette.py",
        data=glob_wildcards("data/mdwf/hmc_logs/hmc_*.out"),
        metadata="metadata/ensembles.csv",
        spectrum_results="data_assets/plateau_fits_results.csv",
        wflow_results="data_assets/WF_measurements.csv",
        plot_styles=config["plot_styles"],
    output:
        plot="assets/plots/time_plot_plaquette.{filetype}",
    conda:
        "envs/basic-analysis.yml"
    shell:
        "python -m {params.module} {input.data} --plot_styles {input.plot_styles} --output_file {output.plot} --skip 1 --metadata_csv {input.metadata} --spectrum_csv {input.spectrum_results} --wflow_csv {input.wflow_results}"
